From 679fa831b09293561abb2210533484d37ba696e6 Mon Sep 17 00:00:00 2001
From: Hariharan <haran465@gmail.com>
Date: Mon, 31 Aug 2020 17:47:06 +0530
Subject: [PATCH] Updated the client_test.py (5 unit tests)

---
 0001-Create-Patch-File.patch | 71 ++++++++++++++++++++++++++++++++++++
 client_test.py               | 26 ++++++++++++-
 2 files changed, 96 insertions(+), 1 deletion(-)
 create mode 100644 0001-Create-Patch-File.patch

diff --git a/0001-Create-Patch-File.patch b/0001-Create-Patch-File.patch
new file mode 100644
index 0000000..94bd052
--- /dev/null
+++ b/0001-Create-Patch-File.patch
@@ -0,0 +1,71 @@
+From d1cca306f4059b21bbf5de023cdfa6ce56189d14 Mon Sep 17 00:00:00 2001
+From: Hariharan <haran465@gmail.com>
+Date: Mon, 31 Aug 2020 16:01:29 +0530
+Subject: [PATCH] Create Patch File
+
+---
+ client3.py     | 10 +++++++---
+ client_test.py |  5 ++++-
+ 2 files changed, 11 insertions(+), 4 deletions(-)
+
+diff --git a/client3.py b/client3.py
+index f1771c3..1635999 100644
+--- a/client3.py
++++ b/client3.py
+@@ -35,14 +35,16 @@ def getDataPoint(quote):
+ 	stock = quote['stock']
+ 	bid_price = float(quote['top_bid']['price'])
+ 	ask_price = float(quote['top_ask']['price'])
+-	price = bid_price
++	price = (bid_price + ask_price) / 2
+ 	return stock, bid_price, ask_price, price
+ 
+ def getRatio(price_a, price_b):
+ 	""" Get ratio of price_a and price_b """
+ 	""" ------------- Update this function ------------- """
+ 	""" Also create some unit tests for this function in client_test.py """
+-	return 1
++	if (price_b == 0):
++		return
++	return (price_a / price_b)
+ 
+ # Main
+ if __name__ == "__main__":
+@@ -52,8 +54,10 @@ if __name__ == "__main__":
+ 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+ 
+ 		""" ----------- Update to get the ratio --------------- """
++		prices = {}
+ 		for quote in quotes:
+ 			stock, bid_price, ask_price, price = getDataPoint(quote)
++			prices[stock] = price
+ 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+ 
+-		print ("Ratio %s" % getRatio(price, price))
++		print ("Ratio %s" % (getRatio(prices['ABC'], prices['DEF'])))
+diff --git a/client_test.py b/client_test.py
+index af2bf26..eec0f8a 100644
+--- a/client_test.py
++++ b/client_test.py
+@@ -8,6 +8,8 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'],quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price']) / 2 ))
+ 
+   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+     quotes = [
+@@ -15,7 +17,8 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
+-
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'],quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price']) / 2 ))
+ 
+   """ ------------ Add more unit tests ------------ """
+ 
+-- 
+2.28.0.windows.1
+
diff --git a/client_test.py b/client_test.py
index eec0f8a..7fae85e 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint,getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -21,8 +21,32 @@ class ClientTest(unittest.TestCase):
       self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'],quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price']) / 2 ))
 
   """ ------------ Add more unit tests ------------ """
+    def test_priceAzeroRatio(self):
+      price_a = 0
+      price_b = 169.69
+      self.assertEqual(getRatio(price_a,price_b), 0) # If return val !=0, testcase fails
 
+    def test_priceBzeroRatio(self):
+      price_a = 121.2
+      price_b = 0
+      self.assertIsNone(getRatio(price_a,price_b)) 
 
+    def ratioGreaterthan1(self):
+      price_a = 352.69
+      price_b = 167.32
+      self.assertGreater(getRatio(price_a,price_b), 1) # Ratio should be greater than 1
+
+      def ratioEqualto1(self):
+      price_a = 352.69
+      price_b = 352.69
+      self.assertGreater(getRatio(price_a,price_b), 1) # Ratio should be equal than 1
+
+      def ratioGreaterthan1(self):
+      price_a = 169.96
+      price_b = 369.69
+      self.assertGreater(getRatio(price_a,price_b), 1) # Ratio should be lesser than 1
+
+# I added these 4 unit tests after looking at the Model made by JPMorgan
 
 if __name__ == '__main__':
     unittest.main()
-- 
2.28.0.windows.1

